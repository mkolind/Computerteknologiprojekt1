#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
import time 
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

LINEAR_VEL = 0.8
STOP_DISTANCE = 0.2
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
SAFE_TURN_DISTANCE = SAFE_STOP_DISTANCE * 2


# Code for RGB-sensor,
# Se Week 3 for opsaetning, Der skal tilfoejes brugere og alt muligt lort.
# Man skal bare lave en instance af RGBsensor og kalde 
import smbus2
import time

class RGBsensor():
    def __init__(self):
        # Get I2C bus
        self.bus = smbus2.SMBus(1)

        time.sleep(0.5)

        # ISL29125 address, 0x44(68) (Standarden)
        # Select configuation-1 register: 0x01(01)
        # 0b00101(5) Operation: RGB, Range: 375 lux, Res: 16 Bits
        self.bus.write_byte_data(0x44, 0x01, 0x05)

   
    # Reads reading from RGB sensor
    # return as tuple (r, g, b)
    def getColour(self):
        # Selects the right registers
        data = self.bus.read_i2c_block_data(0x44, 0x09, 6)

        green = data[1] # Green high byte
        red = data[3]   # Red high byte
        blue = data[5]  # Blue high byte
        return (data[3], data[1], data[5])

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()
        
    def get_scan(self, angle):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = angle            # 1 <= samples_view <= samples
         
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view): 
            if scan_filter[i] == 0.0:
                scan_filter[i] = 3.5
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0.01
        
        return scan_filter

    def check_collision(self):
        full_dist = self.get_scan(360)
        # rospy.loginfo('Min dist: %f', min(full_dist))
        if(min(full_dist) < 0.097):
            return True
        return False
        

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True
        RGB_cooldown = 10
        TMR_cooldown = 4
        victims_found = 0
        collision_counter = 0
        collision_cooldown = 0
        lightSensor = RGBsensor()
        run_time = 60 * 2
        t_end = time.time() + run_time # 60 seconds * 2
        
        accum_speed = 0
        speed_updates = 0

        while (not rospy.is_shutdown()) and (time.time() < t_end):
            lightData = lightSensor.getColour() 
            #rospy.loginfo(lightData)
            if(self.check_collision() and collision_cooldown < 1):
                collision_counter += 1
                collision_cooldown = 5
                rospy.loginfo('COLLISION, total collisions: %i', collision_counter)
            collision_cooldown -= 1


            if RGB_cooldown <= 0:
                if lightData[0] > 80: # 0: R, 1: G, 2: B
                    victims_found += 1
                    rospy.loginfo('New victim found, total victims: %i', victims_found)
                    RGB_cooldown = 10
            else:
                RGB_cooldown -= 1

            lidar_distances = self.get_scan(180)
            small_front_cone = lidar_distances[80:100] # 20 grader
            front_cone = lidar_distances[60:120] # 60 grader
            left_cone = lidar_distances[0:67] # 67 grader
            right_cone = lidar_distances[113:180] # sjovt nok ogs 67

            if turtlebot_moving:
                min_distance = min(front_cone)
                min_index = lidar_distances.index(min_distance)
                if min_distance < SAFE_STOP_DISTANCE:
                    twist.linear.x = -LINEAR_VEL * 0.2
                    turtlebot_moving = False
                else:
                    if min_distance < SAFE_TURN_DISTANCE:
                        if min_index < 90:
                            factor = 1
                        else:
                            factor = -1

                        twist.linear.x = LINEAR_VEL
                        twist.angular.z = factor
                        
                    else: 
                        twist.linear.x = LINEAR_VEL
                        twist.angular.z = 0.0
                    
                    TMR_cooldown = 4
                    turtlebot_moving = True
                    

                

            else:
                min_distance = min(lidar_distances)
                if min(small_front_cone) > SAFE_STOP_DISTANCE*2:
                    twist.linear.x = LINEAR_VEL
                    TMR_cooldown = 4
                    turtlebot_moving = True
                    self._cmd_pub.publish(twist)
                    #rospy.loginfo('Distance of the obstacle : %f', min_distance)
                    continue


                min_index = lidar_distances.index(min_distance)
                if min_distance < SAFE_STOP_DISTANCE*1.5:
                    if(TMR_cooldown > 0):
                        if(min_index >= 90):
                            factor = -1                        
                        else:
                            factor = 1
                    
                    TMR_cooldown -= 1
                    twist.linear.x = 0
                    twist.angular.z = 1*factor
                    turtlebot_moving = False
                    #rospy.loginfo('Turning')
                else:
                    twist.linear.x = LINEAR_VEL
                    twist.angular.z = 0.0
                    TMR_cooldown = 4
                    turtlebot_moving = True
            
            accum_speed += abs(twist.linear.x)
            speed_updates += 1
            self._cmd_pub.publish(twist)
            #rospy.loginfo('Distance of the obstacle : %f', min_distance)
        
        # after shutdown
        # Print run stats
        rospy.loginfo('---- STATS ----')
        rospy.loginfo('Time elapsed: %i', run_time)
        rospy.loginfo('Victims found: %i', victims_found)
        rospy.loginfo('Total collisions: %i', collision_counter)
        rospy.loginfo('Average speed: %f', accum_speed/speed_updates)

def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
